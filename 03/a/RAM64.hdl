// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way16(in=in, sel=address[0..2], a=a1, b=b1, c=c1, d=d1, e=e1, f=f1, g=g1, h=h1);
    DMux8Way(in=load, sel=address[0..2], a=a2, b=b2, c=c2, d=d2, e=e2, f=f2, g=g2, h=h2);
    RAM8(in=a1, load=a2, address=address[3..5], out=w1);
    RAM8(in=b1, load=b2, address=address[3..5], out=w2);
    RAM8(in=c1, load=c2, address=address[3..5], out=w3);
    RAM8(in=d1, load=d2, address=address[3..5], out=w4);
    RAM8(in=e1, load=e2, address=address[3..5], out=w5);
    RAM8(in=f1, load=f2, address=address[3..5], out=w6);
    RAM8(in=g1, load=g2, address=address[3..5], out=w7);
    RAM8(in=h1, load=h2, address=address[3..5], out=w8);
    Mux8Way16(a=w1, b=w2, c=w3, d=w4, e=w5, f=w6, g=w7, h=w8, sel=address[0..2], out=out);
}
