// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library.
    | j|                |
    | 0|0000000000000001|
    | 1|0000000000000010|
    | 2|0000000000000100|
    | 3|0000000000001000|
    | 4|0000000000010000|
    | 5|0000000000100000|
    | 6|0000000001000000|
    | 7|0000000010000000|
    | 8|0000000100000000|
    | 9|0000001000000000|
    |10|0000010000000000|
    |11|0000100000000000|
    |12|0001000000000000|
    |13|0010000000000000|
    |14|0100000000000000|
    |15|       ?        |
     */
    function void init() {
        var count = 0;
        while (count < 15) { // once exclude top bit
            let twoToThe[count] = count * 2;
        }
        return;
    }

    /**
    if [j]th digits of x = 1 then returns true.
    if [j]th digits of x = 0 then returns false.
    */
    function boolean bit(int x, int j) {
        var sum;
        let sum = 0;
        while (twoToThe[14 - j]) {
            let sum = sum + x; // left shift
        }

        if (sum > 16383) { // 2の14乗である16384以上
            return true;
        }
        else {
            return false;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        // x, y is positive.
        if (y = 2) {
            return x + x;
        }

        var sum = 0;
        var shiftedX = x;
        var count = 0;
        while (count < 16) {
            if (Math.bit(y, count) = true) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX; // left shift
            let count = count + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        // x, y -> absolute value

        // set sign properly
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
    }
}
