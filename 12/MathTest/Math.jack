// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int count;
        let count = 0;
        while (count < 15) { // once exclude top bit
            let twoToThe[count] = count * 2;
        }
        return;
    }

    /**
    if [j]th digits of x = 1 then returns true.
    if [j]th digits of x = 0 then returns false.
    */
    function boolean bit(int x, int j) {
        var int sum;
        let sum = 0;
        while (twoToThe[14 - j]) {
            let sum = sum + x; // left shift
        }

        if (sum > 16383) { // 2の14乗である16384以上
            return true;
        }
        else {
            return false;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if ((x > 0) | (x = 0)) {
            return x;
        }
        else {
            return x * -1;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int count;

        // x, y is positive.
        if (y = 2) {
            return x + x;
        }

        let sum = 0;
        let shiftedX = x;
        let count = 0;
        while (count < 16) {
            if (Math.bit(y, count) = true) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX; // left shift
            let count = count + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int sign;
        var int absX;
        var int absY;
        var int q;
        if (((x < 0) & (y < 0)) | ((x > 0) & (y > 0))) {
            let sign = 1;
        } else {
            let sign = -1;
        }

        // x, y -> absolute value
        let absX = Math.abs(x);
        let absY = Math.abs(y);

        // divide
        if (absX < absY) { return 0; }
        let q = Math.divide(absX, 2 * absY);
        if (absX - (2 * q * absY) < absY) {
            return (2 * q) * sign;
        }
        else {
            return (2 * q + 1) * sign;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        // x is positive
        var int y;
        var int j;
        let y = 0;
        let j = 7;
        while (j > -1) {
            if (((y + twoToThe[j]) < x) | ((y + twoToThe[j] = x))) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a = b) {
            return a;
        }
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a = b) {
            return a;
        }
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
