// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int count;
        var int countIter;
        var int sum;

        let twoToThe = Array.new(16);

        let count = 0;
        while (count < 16) { // once exclude top bit
            let sum = 1;
            let countIter = count;

            while (countIter > 0) {
                let sum = sum + sum;
                let countIter = countIter - 1;
            }

            let twoToThe[count] = sum;
            let count = count + 1;
        }
        return;
    }

    /**
    if [j]th digits of x = 1 then returns true.
    if [j]th digits of x = 0 then returns false.

    おそらくここのロジックが間違っている。
    「ビット単位のブール操作を行う」

    */
    function boolean bit(int x, int j) {
        var int comparison;
        var int count;
        var int result;
        let comparison = 0;
        let count = 15;

        while (count > -1) {
            if (~(count = j)) {
                let comparison = comparison | twoToThe[count];
            }
            let count = count - 1;
        }
        let result = x | comparison;

        if (result = -1) {
            return true;
        }
        else {
            return false;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if ((x > 0) | (x = 0)) {
            return x;
        }
        else {
            return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int product;
        var int shiftedX;
        var int j;

        // x, y is positive.
        if (y = 2) {
            return x + x;
        }
        if (x = 2) {
            return y + y;
        }

        let product = 0;
        let shiftedX = x;
        let j = 0;
        while (j < 16) {
            if (Math.bit(y, j) = true) { // if j'th bit of y is 1
                let product = product + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX; // left shift
            let j = j + 1;
        }
        return product;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absX;
        var int absY;
        var int q;
        var int quo;

        // x, y -> absolute value
        let absX = Math.abs(x);
        let absY = Math.abs(y);

        // divide
        if (absX < absY) { return 0; }
        let q = Math.divide(absX, (absY + absY));
        if (absX - ((q * absY) + (q * absY)) < absY) {
            let quo =  q + q;
        }
        else {
            let quo = q + q + 1;
        }

        if (((x < 0) & (y < 0)) | ((x > 0) & (y > 0))) {
            return quo;
        } else {
            return -quo;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        // x is positive
        var int y;
        var int j;
        let y = 0;
        let j = 15;
        while (j > -1) {
            if (((((y + twoToThe[j]) * (y + twoToThe[j])) < x) | (((y + twoToThe[j]) * (y + twoToThe[j])) = x)) & (((y + twoToThe[j]) * (y + twoToThe[j])) > 0)) {
                let y = y + twoToThe[j];
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a = b) {
            return a;
        }
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a = b) {
            return a;
        }
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
