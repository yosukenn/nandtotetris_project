// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 * https://drive.google.com/file/d/137PiYjt4CAZ3ROWiD0DJ8XMUbMM0_VHR/view
 */ 
class Memory {
    static Array heap;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let heap = 2048; // heapBase
        let freeList = heap;
        let heap[0] = 0; // next
        let heap[1] = 14334; // length
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array memory;
        let memory = 0;
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array memory;
        let memory = 0;
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address.
     * improve point: めちゃくちゃ断片化起きている。
     */
    function int alloc(int size) {
        var Array free;
        var int hitLength;
        var int block;
        let free = freeList;

        while (~(free = null)) {
            if ((free[1] > (size + 2)) | (free[1] = (size + 2))) {
                let block = free + 2;

                let hitLength = free[1];
                do Memory.poke(free, null);
                let free[1] = size; 
                let freeList = freeList + size + 2; 
                let freeList[1] = hitLength - size - 2;
                return block;
            }

            let free = Memory.peek(free);
        }
        
        return null;
        // fail
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array free;
        let free = freeList;

        while (~(free = null)) {
            let free = Memory.peek(free);
        }

        do Memory.poke(free, o);
        return;
    }    
}
