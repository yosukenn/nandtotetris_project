// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;

    /** next iterator of this string */
    field int charIttr;
    field int length;
    static int asciiZero;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let str = null;
            let charIttr = 0;
            let length = 0;

            let asciiZero = 48; // 0-9 is 48-57 in ASCII

            return this;
        }

        let str = Array.new(maxLength);
        let charIttr = 0;
        let length = 0;

        let asciiZero = 48; // 0-9 is 48-57 in ASCII

        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(str = null)) {
            do str.dispose();
            return;
        }
        else {
            return;
        }
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[charIttr] = c;
        let charIttr = charIttr + 1;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let charIttr = charIttr - 1;
        let str[charIttr] = null;
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int loop;

        var int i;
        var int d;
        var int v;

        let loop = 1;

        let i = 0;
        let d = str[i] - asciiZero;
        if ((d > 47) & (d < 57)) {
            let v = d;
            let i = i + 1;
        }
        else {
            return null; // number format error
        }

        while (loop = 1) {
            let d = str[i] - asciiZero;
            if ((d > 47) & (d < 57)) {
                let v = (v * 10) + d;
                let i = i + 1;
            }
            else {
                let loop = 0;
            }
        }

        return v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int absVal;
        var int lastDigit;
        var int i;
        var Array temp;

        while (length > 0) {
            do eraseLastChar(); // erase all char
        }

        let absVal = Math.abs(val);

        if (absVal < 9) {
            do appendChar(absVal + asciiZero);
            return;
        }

        let lastDigit = Math.divide(absVal, 10);

        if (lastDigit < 10) {
            do appendChar(lastDigit + asciiZero);
            do appendChar(absVal - (lastDigit * 10) + asciiZero);
            return;
        }
        else {
            do setInt(lastDigit);
            do appendChar(absVal - (lastDigit * 10) + asciiZero);

            if (val < 0) {
                let temp = Array.new(length);
                let i = 0;
                while (i < length) {
                    let temp[i] = str[i];
                    let i = i + 1;
                }

                do setCharAt(0, 45); // set "-"
                let i = 0;
                while (i < length) {
                    do setCharAt(i + 1, temp[i]);
                    let i = i + 1;
                }
                let charIttr = charIttr + 1;
                let length = length + 1;
            }
            return;
        }
    }

    /** Returns the new line character.
     * source: http://www12.plala.or.jp/mz80k2/electronics/ascii/ascii.html */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
