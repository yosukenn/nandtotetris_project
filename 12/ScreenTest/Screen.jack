// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screenBegin;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screenBegin = 16384; // RAM[16384] <= screen maped address <= RAM[24575]
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            do Memory.poke(screenBegin + i, 0);
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) { // ignore complement
        var int targetRamAddress;
        var int targetBit;
        var int n;
        var int i;
        var int peeked;

        let targetRamAddress = screenBegin + (y * 32) + (x / 16);
        let targetBit = x - (x / 16);

        let n = 1;
        if (~(targetBit = 15)) {
            let i = 15 - targetBit - 1;

            while (i > 0) {
                let n = n + 2; // left shift
                let i = i - 1;
            }
        }
        let peeked = Memory.peek(targetRamAddress);

        if (color) { // black
            do Memory.poke(targetRamAddress, peeked | n);
        } else { // white
            do Memory.poke(targetRamAddress, peeked & n);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b;
        var int dx, dy;
        var int adyMinusbdx;

        let dx = x2 - x1;
        let dy = y2 - y1;

        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        // diagonally right upward
        if ((dx > 0) & (dy > 0)) {
            while (((a < dx) | (a = dx)) & ((b < dy) | (b = dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
            return;
        }

        // diagonally right downward
        if ((dx > 0) & (dy < 0)) {
            while (((a < dx) | (a = dx)) & ((b > dy) | (b = dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx > 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b - 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
            return;
        }

        // diagonally left upward
        // diagonally left downward
        if (((dx < 0) & (dy < 0)) | ((dx < 0) & (dy > 0))) {
            do Screen.drawLine(x2, y2, x1, y1);
            return;
        }

        // right horizontal
        if ((dx > 0) & (dy = 0)) {
            while ((x2 > (x1 + a)) | (x2 = (x1 + a))) {
                do Screen.drawPixel(x1 + a, y2);
                let a = a + 1;
            }
            return;
        }

        // left horizontal
        if ((dx < 0) & (dy = 0)) {
            while ((x2 < (x1 - a)) | (x2 = (x1 - a))) {
                do Screen.drawPixel(x1 - a, y2);
                let a = a + 1;
            }
            return;
        }

        // up vertical
        if ((dx = 0) & (dy > 0)) {
            while ((y2 > (y1 + b)) | (y2 = (y1 + b))) {
                do Screen.drawPixel(x2, y1 + b);
                let b = b + 1;
            }
            return;
        }

        // down vertical
        if ((dx = 0) & (dy < 0)) {
            while ((y2 < (y1 - b)) | (y2 = (y1 - b))) {
                do Screen.drawPixel(x2, y1 - b);
                let b = b + 1;
            }
            return;
        }

        // point
        if ((dx = 0) & (dy = 0)) {
            do Screen.drawPixel(x1, y1);
            return;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int a;
        var int dy;

        let a = 0;
        let dy = y1 - y2;

        while ((dy > a) & (dy = a)) {
            do Screen.drawLine(x1, y1 - a, x2, y1 - a);
            let a = a + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        var int r2Minusdy2;
        let dy = r;
        let r2Minusdy2 = (r * r) - (dy * dy);

        while (((dy > -r) | (dy = -r)) & ((dy < r) | (dy = r))) {
            do Screen.drawLine(x - Math.sqrt(r2Minusdy2), y + dy, x + Math.sqrt(r2Minusdy2), y + dy);
            let dy = dy - 1;
            let r2Minusdy2 = (r * r) - (dy * dy);
        }
        return;
    }
}
